// sudoko solver
-------------------------------------------------
// increase c and find the missing board value 
// loop over all numbers and try to fill with a value if its safe to keep 
// again increase c and find the missing value in the board 
// when c = board.length -1 increase r and make column 0
// repeat till r=board.length-1,c=board.length-1 --> display(board)


public class Main
{
	public static void main(String[] args) {
	    int[][] board = {{5,3,0,0,0,0,0,0,0}
	                    ,{6,0,0,1,9,5,0,0,0}
	                    ,{0,9,8,0,0,0,0,6,0}
	                    ,{8,0,0,0,6,0,0,0,3}
	                    ,{4,0,0,8,0,3,0,0,1}
	                    ,{7,0,0,0,2,0,0,0,6}
	                    ,{0,6,0,0,0,0,2,8,0}
	                    ,{0,0,0,4,1,9,0,0,5}
	                    ,{0,0,0,0,8,0,0,7,9}};
		
		sudokoSolver(board,0,0);
	}

    public static void sudokoSolver(int[][] board,int r,int c)
    {
        if(r == board.length -1 && c == board[0].length -1 ){
            display(board);
            //backtrack..
            return;
        }
        
        if(c <= board[0].length-1 && board[r][c]!=0 )
        {   
            sudokoSolver(board,r,c+1);
        }
        else if( c <= board[0].length-1 && board[r][c] == 0 ) 
        {
            //element is missing and column is less than end 
            int num;
            for(num=1;num<=9;num++)
            {
                
                if(isSafe(board,num,r,c))
                {
                     board[r][c]=num;
                     sudokoSolver(board,r,c+1);
                     board[r][c]=0;                
            
                }
                                  
            }
            if( num == 10 ){
                // condition for backtracking.....
                return ;
            }
        }else{
            //column reached end increase row
            sudokoSolver(board,r+1,0);
        }
       return; 
    }

    public static boolean isSafe(int[][] board,int num,int r,int c){
        
            int n = 3;
            int rStart=r - r % n;
            int cStart=c - c % n;
            
            for(int i=rStart;i <= rStart + n-1;i++ ){
                for(int j=cStart; j < cStart +n-1 ;j++)
                if(num==board[i][j]){
                    return false;
                }    
            }
            for(int i=0;i<=board.length-1;i++){
                
                if(board[i][c]==num){
                    return false;
                }
            }
            for(int j=0;j<=board.length-1;j++){
                
                if(board[r][j]==num){
                    return false;
                }
            }
            return true;
        
    }

    public static void display(int[][] board){
        
        for(int[] i:board){
            for(int j:i){
                System.out.print(j);
            }
            System.out.println();
        }
    }
}



